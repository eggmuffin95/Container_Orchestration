{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "DcosImageCommit": "b6d6ad4722600877fde2860122f870031d109da3",
    "TemplateGenerationDate": "2018-03-08 03:15:20.033531"
  },
  "Resources": {
    "PublicSlaveToSlaveIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "DHCPOptions": {
      "Properties": {
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "DomainName": {
          "Fn::If": [
            "RegionIsUsEast1",
            "ec2.internal",
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::Region"
                  },
                  ".compute.internal"
                ]
              ]
            }
          ]
        }
      },
      "Type": "AWS::EC2::DHCPOptions"
    },
    "SlaveToSlaveIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PrivateSubnetNetworkAclAssociation": {
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PrivateSubnetRouteTableAssociation": {
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "InternalMasterLoadBalancer": {
      "Properties": {
        "Scheme": "internal",
        "HealthCheck": {
          "Timeout": "5",
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Target": "TCP:5050",
          "HealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          },
          {
            "Ref": "SlaveSecurityGroup"
          },
          {
            "Ref": "PublicSlaveSecurityGroup"
          },
          {
            "Ref": "MasterSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstanceProtocol": "HTTP",
            "InstancePort": "5050",
            "LoadBalancerPort": "5050",
            "Protocol": "HTTP"
          },
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "2181",
            "LoadBalancerPort": "2181",
            "Protocol": "TCP"
          },
          {
            "InstanceProtocol": "HTTP",
            "InstancePort": "8181",
            "LoadBalancerPort": "8181",
            "Protocol": "HTTP"
          },
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "TCP"
          },
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "TCP"
          },
          {
            "InstanceProtocol": "HTTP",
            "InstancePort": "8080",
            "LoadBalancerPort": "8080",
            "Protocol": "HTTP"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "PublicSubnetNetworkAclAssociation": {
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "PrivateOutboundNetworkAclEntry": {
      "Properties": {
        "RuleAction": "allow",
        "Egress": "true",
        "Protocol": "-1",
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "PortRange": {
          "To": "65535",
          "From": "0"
        },
        "CidrBlock": "0.0.0.0/0"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "SlaveServerGroup": {
      "DependsOn": [
        "PrivateOutboundNetworkAclEntry",
        "NATInstance"
      ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": {
            "Ref": "SlaveInstanceCount"
          }
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "SlaveLaunchConfig"
        },
        "Tags": [
          {
            "Key": "role",
            "PropagateAtLaunch": "true",
            "Value": "mesos-slave"
          }
        ],
        "MinSize": {
          "Ref": "SlaveInstanceCount"
        },
        "MaxSize": {
          "Ref": "SlaveInstanceCount"
        },
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PrivateSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "DesiredCapacity": {
          "Ref": "SlaveInstanceCount"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet"
          }
        ]
      }
    },
    "MasterSecurityGroup": {
      "Properties": {
        "GroupDescription": "Masters",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "5050",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "5050"
          },
          {
            "FromPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "FromPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "8080"
          },
          {
            "FromPort": "8181",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "8181"
          },
          {
            "FromPort": "2181",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp",
            "ToPort": "2181"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "VPCDHCPOptionsAssociation": {
      "Properties": {
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "DependsOn": "Vpc"
    },
    "SlaveSecurityGroup": {
      "Properties": {
        "GroupDescription": "Slaves",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "LbSecurityGroup": {
      "Properties": {
        "GroupDescription": "Master LB",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "PublicSlaveToPublicSlaveIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSubnetRouteTableAssociation": {
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PrivateRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "PublicSlaveIngressFour": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "21"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "Vpc": {
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "VPCSubnetRange",
            "default"
          ]
        }
      },
      "Type": "AWS::EC2::VPC"
    },
    "SlaveRole": {
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeInstances",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:AttachVolume",
                    "ec2:DetachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:CreateSnapshot",
                    "ec2:CopySnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeSnapshotAttribute",
                    "autoscaling:DescribeAutoScalingGroups",
                    "cloudwatch:PutMetricData"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Slaves"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::Role"
    },
    "ExhibitorS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "MasterRole": {
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::If": [
                              "RegionIsUsGovWest1",
                              "arn:aws-us-gov:s3:::",
                              "arn:aws:s3:::"
                            ]
                          },
                          {
                            "Ref": "ExhibitorS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::If": [
                              "RegionIsUsGovWest1",
                              "arn:aws-us-gov:s3:::",
                              "arn:aws:s3:::"
                            ]
                          },
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::Role"
    },
    "SlaveToMasterIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "OutboundNetworkAclEntry": {
      "Properties": {
        "RuleAction": "allow",
        "Egress": "true",
        "Protocol": "-1",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "PortRange": {
          "To": "65535",
          "From": "0"
        },
        "CidrBlock": "0.0.0.0/0"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "PublicSlaveIngressSix": {
      "Properties": {
        "FromPort": "5052",
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "32000"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSlaveLoadBalancer": {
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "HealthCheck": {
          "Timeout": "2",
          "Interval": "5",
          "UnhealthyThreshold": "2",
          "Target": "HTTP:9090/_haproxy_health_check",
          "HealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "TCP"
          },
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "TCP"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "PublicSlaveLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "EbsOptimized": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config",
                "\n",
                "\"coreos\":",
                "\n",
                "  \"units\":",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive",
                "\n",
                "      Before=var-lib.mount dbus.service",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      RemainAfterExit=yes",
                "\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"",
                "\n",
                "    \"name\": |-",
                "\n",
                "      format-var-lib-ephemeral.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Mount /var/lib",
                "\n",
                "      Before=dbus.service",
                "\n",
                "      [Mount]",
                "\n",
                "      What=/dev/xvdb",
                "\n",
                "      Where=/var/lib",
                "\n",
                "      Type=ext4",
                "\n",
                "    \"name\": |-",
                "\n",
                "      var-lib.mount",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      etcd.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      update-engine.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      locksmithd.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"name\": |-",
                "\n",
                "      systemd-resolved.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      restart",
                "\n",
                "    \"name\": |-",
                "\n",
                "      systemd-journald.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      restart",
                "\n",
                "    \"name\": |-",
                "\n",
                "      docker.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Before=dcos.target",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d",
                "\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-link-env.service",
                "\n",
                "  - \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=Pkgpanda: Download DC/OS to this host.",
                "\n",
                "      After=network-online.target",
                "\n",
                "      Wants=network-online.target",
                "\n",
                "      ConditionPathExists=!/opt/mesosphere/active/",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/a0654657903fb68dff60f6e522a7f241c1bfbf0f.bootstrap.tar.xz",
                "\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere",
                "\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere",
                "\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-download.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.",
                "\n",
                "      Requires=dcos-download.service",
                "\n",
                "      After=dcos-download.service",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/environment",
                "\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd",
                "\n",
                "      [Install]",
                "\n",
                "      WantedBy=multi-user.target",
                "\n",
                "    \"enable\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-setup.service",
                "\n",
                "    \"no_block\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |-",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Signal CloudFormation Success",
                "\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal",
                "\n",
                "      [Service]",
                "\n",
                "      Type=simple",
                "\n",
                "      Restart=on-failure",
                "\n",
                "      StartLimitInterval=0",
                "\n",
                "      RestartSec=15s",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/environment",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata",
                "\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"",
                "\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos",
                "\n",
                "      ExecStartPre=/opt/mesosphere/bin/dcos-diagnostics check node-poststart",
                "\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal",
                "\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-cfn-signal.service",
                "\n",
                "    \"no_block\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "  \"update\":",
                "\n",
                "    \"reboot-strategy\": |-",
                "\n",
                "      off",
                "\n",
                "\"write_files\":",
                "\n",
                "- \"content\": |",
                "\n",
                "    https://downloads.dcos.io/dcos/stable",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/repository-url",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    835e624ff791d976e9ebf280e0a6001ff72da47b",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/cluster-package-list",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    [Journal]",
                "\n",
                "    MaxLevelConsole=warning",
                "\n",
                "    RateLimitInterval=1s",
                "\n",
                "    RateLimitBurst=20000",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/systemd/journald.conf.d/dcos.conf",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    libstorage:",
                "\n",
                "      integration:",
                "\n",
                "        volume:",
                "\n",
                "          operations:",
                "\n",
                "            unmount:",
                "\n",
                "              ignoreusedcount: true",
                "\n",
                "      server:",
                "\n",
                "        tasks:",
                "\n",
                "          logTimeout: 5m",
                "\n",
                "    rexray:",
                "\n",
                "      loglevel: info",
                "\n",
                "      service: ebs",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/rexray/config.yml",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    \"bound_values\":",
                "\n",
                "      \"adminrouter_auth_enabled\": |-",
                "\n",
                "        ",
                {
                  "Ref": "OAuthEnabled"
                },
                "\n",
                "      \"agent_role\": |-",
                "\n",
                "        ",
                {
                  "Ref": "SlaveRole"
                },
                "\n",
                "      \"aws_region\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "      \"aws_stack_id\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackId"
                },
                "\n",
                "      \"aws_stack_name\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "      \"cluster_name\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "      \"exhibitor_address\": |-",
                "\n",
                "        ",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "      \"master_external_loadbalancer\": |-",
                "\n",
                "        ",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "      \"master_role\": |-",
                "\n",
                "        ",
                {
                  "Ref": "MasterRole"
                },
                "\n",
                "      \"oauth_enabled\": |-",
                "\n",
                "        ",
                {
                  "Ref": "OAuthEnabled"
                },
                "\n",
                "      \"s3_bucket\": |-",
                "\n",
                "        ",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "\n",
                "      \"s3_prefix\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "    \"late_bound_package_id\": |-",
                "\n",
                "      dcos-provider-7a32b0249ad91e2fb5bd8dfe2fc88f268d229c1b-aws--setup",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/late-config.yaml",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/slave_public",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/aws",
                "\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "DefaultInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": 150
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "GatewayToInternet": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "MasterToPublicSlaveIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MasterInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "MasterRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "SlaveLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "false",
        "EbsOptimized": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config",
                "\n",
                "\"coreos\":",
                "\n",
                "  \"units\":",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive",
                "\n",
                "      Before=var-lib.mount dbus.service",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      RemainAfterExit=yes",
                "\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"",
                "\n",
                "    \"name\": |-",
                "\n",
                "      format-var-lib-ephemeral.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Mount /var/lib",
                "\n",
                "      Before=dbus.service",
                "\n",
                "      [Mount]",
                "\n",
                "      What=/dev/xvdb",
                "\n",
                "      Where=/var/lib",
                "\n",
                "      Type=ext4",
                "\n",
                "    \"name\": |-",
                "\n",
                "      var-lib.mount",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      etcd.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      update-engine.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      locksmithd.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"name\": |-",
                "\n",
                "      systemd-resolved.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      restart",
                "\n",
                "    \"name\": |-",
                "\n",
                "      systemd-journald.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      restart",
                "\n",
                "    \"name\": |-",
                "\n",
                "      docker.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Before=dcos.target",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d",
                "\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-link-env.service",
                "\n",
                "  - \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=Pkgpanda: Download DC/OS to this host.",
                "\n",
                "      After=network-online.target",
                "\n",
                "      Wants=network-online.target",
                "\n",
                "      ConditionPathExists=!/opt/mesosphere/active/",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/a0654657903fb68dff60f6e522a7f241c1bfbf0f.bootstrap.tar.xz",
                "\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere",
                "\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere",
                "\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-download.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.",
                "\n",
                "      Requires=dcos-download.service",
                "\n",
                "      After=dcos-download.service",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/environment",
                "\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd",
                "\n",
                "      [Install]",
                "\n",
                "      WantedBy=multi-user.target",
                "\n",
                "    \"enable\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-setup.service",
                "\n",
                "    \"no_block\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |-",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Signal CloudFormation Success",
                "\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal",
                "\n",
                "      [Service]",
                "\n",
                "      Type=simple",
                "\n",
                "      Restart=on-failure",
                "\n",
                "      StartLimitInterval=0",
                "\n",
                "      RestartSec=15s",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/environment",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata",
                "\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"",
                "\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos",
                "\n",
                "      ExecStartPre=/opt/mesosphere/bin/dcos-diagnostics check node-poststart",
                "\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal",
                "\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-cfn-signal.service",
                "\n",
                "    \"no_block\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "  \"update\":",
                "\n",
                "    \"reboot-strategy\": |-",
                "\n",
                "      off",
                "\n",
                "\"write_files\":",
                "\n",
                "- \"content\": |",
                "\n",
                "    https://downloads.dcos.io/dcos/stable",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/repository-url",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    835e624ff791d976e9ebf280e0a6001ff72da47b",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/cluster-package-list",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    [Journal]",
                "\n",
                "    MaxLevelConsole=warning",
                "\n",
                "    RateLimitInterval=1s",
                "\n",
                "    RateLimitBurst=20000",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/systemd/journald.conf.d/dcos.conf",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    libstorage:",
                "\n",
                "      integration:",
                "\n",
                "        volume:",
                "\n",
                "          operations:",
                "\n",
                "            unmount:",
                "\n",
                "              ignoreusedcount: true",
                "\n",
                "      server:",
                "\n",
                "        tasks:",
                "\n",
                "          logTimeout: 5m",
                "\n",
                "    rexray:",
                "\n",
                "      loglevel: info",
                "\n",
                "      service: ebs",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/rexray/config.yml",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    \"bound_values\":",
                "\n",
                "      \"adminrouter_auth_enabled\": |-",
                "\n",
                "        ",
                {
                  "Ref": "OAuthEnabled"
                },
                "\n",
                "      \"agent_role\": |-",
                "\n",
                "        ",
                {
                  "Ref": "SlaveRole"
                },
                "\n",
                "      \"aws_region\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "      \"aws_stack_id\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackId"
                },
                "\n",
                "      \"aws_stack_name\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "      \"cluster_name\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "      \"exhibitor_address\": |-",
                "\n",
                "        ",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "      \"master_external_loadbalancer\": |-",
                "\n",
                "        ",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "      \"master_role\": |-",
                "\n",
                "        ",
                {
                  "Ref": "MasterRole"
                },
                "\n",
                "      \"oauth_enabled\": |-",
                "\n",
                "        ",
                {
                  "Ref": "OAuthEnabled"
                },
                "\n",
                "      \"s3_bucket\": |-",
                "\n",
                "        ",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "\n",
                "      \"s3_prefix\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "    \"late_bound_package_id\": |-",
                "\n",
                "      dcos-provider-7a32b0249ad91e2fb5bd8dfe2fc88f268d229c1b-aws--setup",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/late-config.yaml",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/slave",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/aws",
                "\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "DefaultInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": 150
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "PublicSubnet": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ],
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "PublicSubnetRange",
            "default"
          ]
        }
      },
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "Vpc"
    },
    "SlaveToPublicSlaveIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MasterLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "EbsOptimized": "true",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config",
                "\n",
                "\"coreos\":",
                "\n",
                "  \"units\":",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive",
                "\n",
                "      Before=var-lib.mount dbus.service",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      RemainAfterExit=yes",
                "\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"",
                "\n",
                "    \"name\": |-",
                "\n",
                "      format-var-lib-ephemeral.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Mount /var/lib",
                "\n",
                "      Before=dbus.service",
                "\n",
                "      [Mount]",
                "\n",
                "      What=/dev/xvdb",
                "\n",
                "      Where=/var/lib",
                "\n",
                "      Type=ext4",
                "\n",
                "    \"name\": |-",
                "\n",
                "      var-lib.mount",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      etcd.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      update-engine.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"mask\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      locksmithd.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      stop",
                "\n",
                "    \"name\": |-",
                "\n",
                "      systemd-resolved.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      restart",
                "\n",
                "    \"name\": |-",
                "\n",
                "      systemd-journald.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      restart",
                "\n",
                "    \"name\": |-",
                "\n",
                "      docker.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Before=dcos.target",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d",
                "\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-link-env.service",
                "\n",
                "  - \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=Pkgpanda: Download DC/OS to this host.",
                "\n",
                "      After=network-online.target",
                "\n",
                "      Wants=network-online.target",
                "\n",
                "      ConditionPathExists=!/opt/mesosphere/active/",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/a0654657903fb68dff60f6e522a7f241c1bfbf0f.bootstrap.tar.xz",
                "\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere",
                "\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere",
                "\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-download.service",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.",
                "\n",
                "      Requires=dcos-download.service",
                "\n",
                "      After=dcos-download.service",
                "\n",
                "      [Service]",
                "\n",
                "      Type=oneshot",
                "\n",
                "      StandardOutput=journal+console",
                "\n",
                "      StandardError=journal+console",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/environment",
                "\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd",
                "\n",
                "      [Install]",
                "\n",
                "      WantedBy=multi-user.target",
                "\n",
                "    \"enable\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-setup.service",
                "\n",
                "    \"no_block\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "  - \"command\": |-",
                "\n",
                "      start",
                "\n",
                "    \"content\": |-",
                "\n",
                "      [Unit]",
                "\n",
                "      Description=AWS Setup: Signal CloudFormation Success",
                "\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal",
                "\n",
                "      [Service]",
                "\n",
                "      Type=simple",
                "\n",
                "      Restart=on-failure",
                "\n",
                "      StartLimitInterval=0",
                "\n",
                "      RestartSec=15s",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/environment",
                "\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata",
                "\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"",
                "\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos",
                "\n",
                "      ExecStartPre=/opt/mesosphere/bin/dcos-diagnostics check node-poststart",
                "\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal",
                "\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal",
                "\n",
                "    \"name\": |-",
                "\n",
                "      dcos-cfn-signal.service",
                "\n",
                "    \"no_block\": !!bool |-",
                "\n",
                "      true",
                "\n",
                "  \"update\":",
                "\n",
                "    \"reboot-strategy\": |-",
                "\n",
                "      off",
                "\n",
                "\"write_files\":",
                "\n",
                "- \"content\": |",
                "\n",
                "    https://downloads.dcos.io/dcos/stable",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/repository-url",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    835e624ff791d976e9ebf280e0a6001ff72da47b",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/cluster-package-list",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    [Journal]",
                "\n",
                "    MaxLevelConsole=warning",
                "\n",
                "    RateLimitInterval=1s",
                "\n",
                "    RateLimitBurst=20000",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/systemd/journald.conf.d/dcos.conf",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    libstorage:",
                "\n",
                "      integration:",
                "\n",
                "        volume:",
                "\n",
                "          operations:",
                "\n",
                "            unmount:",
                "\n",
                "              ignoreusedcount: true",
                "\n",
                "      server:",
                "\n",
                "        tasks:",
                "\n",
                "          logTimeout: 5m",
                "\n",
                "    rexray:",
                "\n",
                "      loglevel: info",
                "\n",
                "      service: ebs",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/rexray/config.yml",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": |",
                "\n",
                "    \"bound_values\":",
                "\n",
                "      \"adminrouter_auth_enabled\": |-",
                "\n",
                "        ",
                {
                  "Ref": "OAuthEnabled"
                },
                "\n",
                "      \"agent_role\": |-",
                "\n",
                "        ",
                {
                  "Ref": "SlaveRole"
                },
                "\n",
                "      \"aws_region\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "      \"aws_stack_id\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackId"
                },
                "\n",
                "      \"aws_stack_name\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "      \"cluster_name\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "      \"exhibitor_address\": |-",
                "\n",
                "        ",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "      \"master_external_loadbalancer\": |-",
                "\n",
                "        ",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "\n",
                "      \"master_role\": |-",
                "\n",
                "        ",
                {
                  "Ref": "MasterRole"
                },
                "\n",
                "      \"oauth_enabled\": |-",
                "\n",
                "        ",
                {
                  "Ref": "OAuthEnabled"
                },
                "\n",
                "      \"s3_bucket\": |-",
                "\n",
                "        ",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "\n",
                "      \"s3_prefix\": |-",
                "\n",
                "        ",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "    \"late_bound_package_id\": |-",
                "\n",
                "      dcos-provider-7a32b0249ad91e2fb5bd8dfe2fc88f268d229c1b-aws--setup",
                "\n",
                "  \"owner\": |-",
                "\n",
                "    root",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/setup-flags/late-config.yaml",
                "\n",
                "  \"permissions\": |-",
                "\n",
                "    0644",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/master",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/aws_master",
                "\n",
                "- \"content\": \"\"",
                "\n",
                "  \"path\": |-",
                "\n",
                "    /etc/mesosphere/roles/aws",
                "\n"
              ]
            ]
          }
        },
        "InstanceType": {
          "Ref": "DefaultInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "MasterInstanceProfile"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": 150
            }
          },
          {
            "DeviceName": "/dev/xvdb",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeType": "gp2",
              "VolumeSize": 80
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "MasterSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAmi",
            {
              "Ref": "AWS::Region"
            },
            "stable"
          ]
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "InternetGateway": {
      "DependsOn": "Vpc",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      }
    },
    "PublicSlaveSecurityGroup": {
      "Properties": {
        "GroupDescription": "Public slave",
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "PrivateNetworkAcl": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PrivateInboundNetworkAclEntry": {
      "Properties": {
        "RuleAction": "allow",
        "Egress": "false",
        "Protocol": "-1",
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "PortRange": {
          "To": "65535",
          "From": "0"
        },
        "CidrBlock": "0.0.0.0/0"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "PublicSlaveIngressOne": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "21"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SlaveInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "SlaveRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "PrivateRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "InstanceId": {
          "Ref": "NATInstance"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateSubnet": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          }
        ],
        "CidrBlock": {
          "Fn::FindInMap": [
            "Parameters",
            "PrivateSubnetRange",
            "default"
          ]
        }
      },
      "Type": "AWS::EC2::Subnet",
      "DependsOn": "Vpc"
    },
    "PublicRoute": {
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSlaveToMasterIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSlaveIngressFive": {
      "Properties": {
        "FromPort": "23",
        "IpProtocol": "udp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "5050"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "NATInstance": {
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "m4.large",
        "NetworkInterfaces": [
          {
            "SubnetId": {
              "Ref": "PublicSubnet"
            },
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "SlaveSecurityGroup"
              },
              {
                "Ref": "MasterSecurityGroup"
              },
              {
                "Ref": "AdminSecurityGroup"
              }
            ]
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "NATAmi",
            {
              "Ref": "AWS::Region"
            },
            "default"
          ]
        }
      }
    },
    "PublicRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": "Vpc"
    },
    "MasterToSlaveIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicSlaveIngressTwo": {
      "Properties": {
        "FromPort": "23",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "5050"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MasterServerGroup": {
      "DependsOn": "GatewayToInternet",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": 3
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "MasterLaunchConfig"
        },
        "Tags": [
          {
            "Key": "role",
            "PropagateAtLaunch": "true",
            "Value": "mesos-master"
          }
        ],
        "MinSize": 3,
        "MaxSize": 3,
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          },
          {
            "Ref": "InternalMasterLoadBalancer"
          }
        ],
        "DesiredCapacity": 3,
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "ElasticLoadBalancer": {
      "DependsOn": "GatewayToInternet",
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "HealthCheck": {
          "Timeout": "5",
          "Interval": "30",
          "UnhealthyThreshold": "2",
          "Target": "TCP:5050",
          "HealthyThreshold": "2"
        },
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "TCP"
          },
          {
            "InstanceProtocol": "TCP",
            "InstancePort": "443",
            "LoadBalancerPort": "443",
            "Protocol": "TCP"
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "InboundNetworkAclEntry": {
      "Properties": {
        "RuleAction": "allow",
        "Egress": "false",
        "Protocol": "-1",
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "PortRange": {
          "To": "65535",
          "From": "0"
        },
        "CidrBlock": "0.0.0.0/0"
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "SlaveToMasterLBIngress": {
      "Properties": {
        "FromPort": "2181",
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "GroupId": {
          "Ref": "LbSecurityGroup"
        },
        "ToPort": "2181"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "AdminSecurityGroup": {
      "Properties": {
        "GroupDescription": "Admin access to servers",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "FromPort": "80",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "FromPort": "443",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "PublicSlaveIngressThree": {
      "Properties": {
        "FromPort": "5052",
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "ToPort": "32000"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "PublicNetworkAcl": {
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "PublicSlaveServerGroup": {
      "DependsOn": "GatewayToInternet",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": {
            "Ref": "PublicSlaveInstanceCount"
          }
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "PublicSlaveLaunchConfig"
        },
        "Tags": [
          {
            "Key": "role",
            "PropagateAtLaunch": "true",
            "Value": "mesos-slave"
          }
        ],
        "MinSize": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "MaxSize": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "AvailabilityZones": [
          {
            "Fn::GetAtt": [
              "PublicSubnet",
              "AvailabilityZone"
            ]
          }
        ],
        "LoadBalancerNames": [
          {
            "Ref": "PublicSlaveLoadBalancer"
          }
        ],
        "DesiredCapacity": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet"
          }
        ]
      }
    },
    "MasterToMasterIngress": {
      "Properties": {
        "FromPort": "0",
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    }
  },
  "Outputs": {
    "PublicSlaveDnsAddress": {
      "Value": {
        "Fn::GetAtt": [
          "PublicSlaveLoadBalancer",
          "DNSName"
        ]
      },
      "Description": "Public slaves"
    },
    "DnsAddress": {
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer",
          "DNSName"
        ]
      },
      "Description": "Master"
    },
    "ExhibitorS3Bucket": {
      "Value": {
        "Ref": "ExhibitorS3Bucket"
      },
      "Description": "Exhibitor bucket"
    }
  },
  "Description": "DC/OS AWS CloudFormation Template",
  "Parameters": {
    "SlaveInstanceCount": {
      "Default": "5",
      "Type": "Number",
      "Description": "Required: # of private agents"
    },
    "PublicSlaveInstanceCount": {
      "Default": "1",
      "Type": "Number",
      "Description": "Required: # of public agents"
    },
    "DefaultInstanceType": {
      "Default": "m4.xlarge",
      "Type": "String",
      "Description": "default instance"
    },
    "AdminLocation": {
      "MinLength": "9",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "Description": "Optional: Specify the IP range to whitelist access to the admin zone. Must be a valid CIDR.",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "Type": "String",
      "ConstraintDescription": "must be a valid CIDR."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Required: EC2 Key Pair."
    },
    "OAuthEnabled": {
      "Default": "true",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "\nEnable OAuth"
    }
  },
  "Mappings": {
    "RegionToAmi": {
      "ap-southeast-2": {
        "stable": "ami-9db0b0fe"
      },
      "us-east-1": {
        "stable": "ami-1ad0000c"
      },
      "eu-central-1": {
        "stable": "ami-903df7ff"
      },
      "ap-southeast-1": {
        "stable": "ami-aacc7dc9"
      },
      "eu-west-1": {
        "stable": "ami-abcde0cd"
      },
      "sa-east-1": {
        "stable": "ami-c11573ad"
      },
      "ap-northeast-1": {
        "stable": "ami-93f2baf4"
      },
      "us-gov-west-1": {
        "stable": "ami-e441fb85"
      },
      "us-west-2": {
        "stable": "ami-444dcd24"
      },
      "us-west-1": {
        "stable": "ami-b31d43d3"
      }
    },
    "NATAmi": {
      "ap-southeast-2": {
        "default": "ami-996402a3"
      },
      "us-east-1": {
        "default": "ami-4c9e4b24"
      },
      "eu-central-1": {
        "default": "ami-204c7a3d"
      },
      "ap-southeast-1": {
        "default": "ami-b082dae2"
      },
      "eu-west-1": {
        "default": "ami-3760b040"
      },
      "sa-east-1": {
        "default": "ami-b972dba4"
      },
      "ap-northeast-1": {
        "default": "ami-55c29e54"
      },
      "us-gov-west-1": {
        "default": "ami-fe991b9f"
      },
      "us-west-2": {
        "default": "ami-bb69128b"
      },
      "us-west-1": {
        "default": "ami-2b2b296e"
      }
    },
    "Parameters": {
      "StackCreationTimeout": {
        "default": "PT45M"
      },
      "VPCSubnetRange": {
        "default": "10.0.0.0/16"
      },
      "PublicSubnetRange": {
        "default": "10.0.4.0/22"
      },
      "PrivateSubnetRange": {
        "default": "10.0.0.0/22"
      }
    }
  },
  "Conditions": {
    "RegionIsUsEast1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-east-1"
      ]
    },
    "RegionIsUsGovWest1": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  }
}
